# Include previously-prepared Docker image with Gramine (if any) or compile Gramine from sources
{% if Gramine.Image %}
FROM gsc-{{Gramine.Image}} AS gramine
{% else %}
{% include compile_template %}
{% endif %}

# Combine Gramine image with the original app image
FROM {{app_image}}

# Install distro-specific packages to run Gramine (e.g., python3, protobuf, toml, etc.)
{% block install %}{% endblock %}

# Copy path-specific installation of Gramine
COPY --from=gramine /gramine/meson_build_output /gramine/meson_build_output

# Copy helper scripts and Gramine manifest
COPY *.py /
COPY apploader.sh /
COPY entrypoint.manifest /

# Generate trusted arguments if required
{% if not insecure_args %}
RUN /gramine/meson_build_output/bin/gramine-argv-serializer \
        {{binary}} {{binary_arguments}} "{{"\" \"".join(cmd)}}" > /trusted_argv
{% endif %}

# Docker entrypoint/cmd typically contains only the basename of the executable so create a symlink
RUN cd / \
    && which {{binary}} | xargs ln -s || true

# Include Meson build output directory in $PATH
ENV PATH="/gramine/meson_build_output/bin:$PATH"

# Mark apploader.sh executable, finalize manifest, and remove intermediate scripts
RUN chmod u+x /apploader.sh \
    && /usr/bin/python3 -B /finalize_manifest.py \
    && rm -f /finalize_manifest.py

# Define default command
ENTRYPOINT ["/bin/bash", "/apploader.sh"]
CMD [{% if insecure_args %} "{{'", "'.join(cmd)}}" {% endif %}]
